# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wZYA2iZyAFlv59wqgnO7ZV0GakdgiLkN
"""

import tensorflow as tensorflow
import keras as keras
from flask import Flask, render_template, request
from tensorflow.keras.models import load_model
from keras.applications.inception_resnet_v2 import InceptionResNetV2
from keras.preprocessing import image
from tensorflow.keras.models import load_model
import numpy as np
import os 
import cv2



dict_breeds={'Afghan_hound': 7,'African_hunting_dog': 118,'Airedale': 33,'American_Staffordshire_terrier': 24,'Appenzeller': 93,'Australian_terrier': 41,'Bedlington_terrier': 23,
 'Bernese_mountain_dog': 91,'Blenheim_spaniel': 3,'Border_collie': 81,'Border_terrier': 30,'Boston_bull': 43,'Bouvier_des_Flandres': 83,'Brabancon_griffon': 116,
 'Brittany_spaniel': 63,'Cardigan': 117,'Chesapeake_Bay_retriever': 58,'Dandie_Dinmont': 42,'Doberman': 82,'English_foxhound': 15,'English_setter': 57,
 'English_springer': 70,'EntleBucher': 94,'Eskimo_dog': 96,'French_bulldog': 90,'German_shepherd': 77,'German_short haired_pointer': 62,'Gordon_setter': 55,
 'Great_Dane': 89,'Great_Pyrenees': 99,'Greater_Swiss_Mountain_dog': 86,'Ibizan_hound': 28,'Irish_setter': 59,'Irish_terrier': 38,'Irish_water_spaniel': 72,
 'Irish_wolfhound': 16,'Italian_greyhound': 19,'Japanese_spaniel': 6,'Kerry_blue_terrier': 31,'Labrador_retriever': 54,'Lakeland_terrier': 36, 'Leonberg': 103,
 'Lhasa': 52,'Maltese_dog': 8,'Mexican_hairless': 110,'Newfoundland': 102,'Norfolk_terrier': 37,'Norwegian_elkhound': 27,'Norwich_terrier': 32,'Old_English_sheepdog': 80,
 'Pekinese': 2, 'Pembroke': 115, 'Pomeranian': 98, 'Rhodesian_ridgeback': 5, 'Rottweiler': 78, 'Saint_Bernard': 92, 'Saluki': 25, 'Samoyed': 100, 'Scotch_terrier': 44,
 'Scottish_deerhound': 21, 'Sealyham_terrier': 34, 'Shetland_sheepdog': 79, 'Shih Tzu': 0, 'Siberian_husky': 104, 'Staffordshire_bullterrier': 26, 'Sussex_spaniel': 71,
 'Tibetan_mastiff': 87, 'Tibetan_terrier': 48, 'Walker_hound': 11, 'Weimaraner': 22, 'Welsh_springer_spaniel': 68, 'West_Highland_white_terrier': 47, 'Yorkshire_terrier': 39,
 'affenpinscher': 106, 'basenji': 101, 'basset': 9, 'beagle': 13, 'black and tan_coonhound': 14, 'bloodhound': 18, 'bluetick': 12, 'borzoi': 10, 'boxer': 88,
 'briard': 74, 'bull_mastiff': 95, 'cairn': 35, 'chow': 107, 'clumber': 64, 'cocker_spaniel': 69, 'collie': 76, 'curly coated_retriever': 61, 'dhole': 114,
 'dingo': 111, 'flat coated_retriever': 53, 'giant_schnauzer': 45, 'golden_retriever': 56, 'groenendael': 66, 'keeshond': 108, 'kelpie': 75, 'komondor': 84,
 'kuvasz': 73, 'malamute': 97, 'malinois': 67, 'miniature_pinscher': 85, 'miniature_poodle': 113, 'miniature_schnauzer': 51, 'otterhound': 29, 'papillon': 1, 'pug': 105,
 'redbone': 17, 'schipperke': 65, 'silky_terrier': 50, 'soft coated_wheaten_terrier': 46, 'standard_poodle': 109, 'standard_schnauzer': 49, 'toy_poodle': 112,
 'toy_terrier': 4, 'vizsla': 60, 'whippet': 20, 'wire haired_fox_terrier': 40}

labels=dict((v,k) for k,v in dict_breeds.items())

app = Flask(__name__)

model = load_model('model.h5')


#model.make_predict_function()

def equalize_img(image):

  if (len(image.shape)<3):

    clahe_gey = cv.createCLAHE(clipLimit=2.0, tileGridSize=(8,8))
    res = clahe_grey.apply(img)
  
  else:
    #segregate color streams
    b,g,r = cv2.split(image)

    #create a CLAHE (Contrast Limited Adaptive Histogram Equalization) object
    clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8,8))

    cl1_b = clahe.apply(b)
    cl1_g = clahe.apply(g)
    cl1_r = clahe.apply(r)
    #merge all photos 
    res = cv2.merge((cl1_b, cl1_g, cl1_r))

  return res

new_width=224
new_height=224
dsize=(new_width,new_height)


def predict_label(img_path):
  
  #preprocess the image
  source=cv2.imread(img_path,cv2.IMREAD_UNCHANGED)

  resized_image=cv2.resize(source,dsize)

  output=cv2.fastNlMeansDenoisingColored(equalize_img(resized_image),None,3,10,7,21)

  #adapt_image
  image = output.astype('float64')
  image /= 255
  image = image.reshape((1, image.shape[0], image.shape[1], image.shape[2]))

  #making the prediction
  pred_proba=model.predict(image)
  pred=np.argsort(pred_proba, axis=1)[:,-1:][0][0]

  
  return labels[pred]

# routes
@app.route("/", methods=['GET', 'POST'])
def main():
	return render_template("index.html")

@app.route("/submit", methods = ['GET', 'POST'])
def get_output():
	if request.method == 'POST':
		img = request.files['my_image']

		img_path = "static/" + img.filename	
		img.save(img_path)

		p = predict_label(img_path)

	return render_template("index.html", prediction = p, img_path = img_path)


if __name__ =='__main__':
	#app.debug = True
	app.run(debug = True)